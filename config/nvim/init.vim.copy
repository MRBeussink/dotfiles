



" " Use <Tab> and <S-Tab> to navigate through popup menu
" inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" " Avoid showing message extra message when using completion
" set shortmess+=c

source ~/.config/nvim/plugins.vim
source ~/.config/nvim/lsp-config.vim

colorscheme nord
syntax on
set termguicolors

set number relativenumber
set nu rnu
set cursorline

set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8

set autoread

" Enable hidden buffers
set hidden

" Fix backspace indent
set backspace=indent,eol,start

set tabstop=2
set softtabstop=0
set shiftwidth=2
set expandtab
" autocmd Filetype js setlocal tabstop=2
" autocmd Filetype ts setlocal tabstop=2
" autocmd Filetype jsx setlocal tabstop=2
" autocmd Filetype json setlocal tabstop=2


" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

"splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" line wrapping
set wrap linebreak nolist
vmap <D-j> gj
vmap <D-k> gk
vmap <D-4> g$
vmap <D-6> g^
vmap <D-0> g^
nmap <D-j> gj
nmap <D-k> gk
nmap <D-4> g$
nmap <D-6> g^
nmap <D-0> g^

"" Copy/Paste/Cut
noremap YY "+y<CR>
noremap <leader>p "+gP<CR>
noremap XX "+x<CR>

set splitbelow
set splitright

"trigger fzf
nnoremap <silent> <C-p> :FZF<CR>

"" fzf.vim
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__
let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"

" The Silver Searcher
if executable('ag')
  let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
  set grepprg=ag\ --nogroup\ --nocolor
endif

"vim-vinegar
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'


" rainbow_parentheses
" augroup rainbow_web
"   autocmd!
"   autocmd FileType html,css,js,json,jsx,ts,tsx
" augroup END

" IndentLine
let g:indentLine_enabled = 1
let g:indentLine_concealcursor = 0
" let g:indentLine_char = '⎸'
let g:indentLine_char = '┆'
let g:indentLine_char_list = ['⎸', '¦']
" let g:indentLine_char_list = ['⎸', '¦', '┆', '¦', '┆''¦', '┆']
let g:indentLine_faster = 1

" Emoji completion
set completefunc=emoji#complete

" vim-anyfold
filetype plugin indent on " req
autocmd Filetype * AnyFoldActivate

" Set pairs to rainbow-ify
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}'], ['<', '>']]

"
" Conquer of Completion
"

" " GoTo code navigation.
" nmap <silent> gd <Plug>(coc-definition)
" nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
" nmap <silent> gr <Plug>(coc-references)

" " Use `lp` and `ln` for navigate diagnostics
" nmap <silent> <leader>lp <Plug>(coc-diagnostic-prev)
" nmap <silent> <leader>ln <Plug>(coc-diagnostic-next)

" " Remap for rename current word
" nmap <leader>lr <Plug>(coc-rename)

" " Use K for show documentation in preview window
" nnoremap <silent> K :call <SID>show_documentation()<CR>

" function! s:show_documentation()
"   if &filetype == 'vim'
"     execute 'h '.expand('<cword>')
"   else
"     call CocAction('doHover')
"   endif
" endfunction

" " Highlight symbol under cursor on CursorHold
" autocmd CursorHold * silent call CocActionAsync('highlight')

" Neat, but thoughbot's makes rcm moot
" Reloads vimrc after saving but keep cursor position
" if !exists('*ReloadVimrc')
"    fun! ReloadVimrc()
"        let save_cursor = getcurpos()
"        source $MYVIMRC
"        call setpos('.', save_cursor)
"    endfun
" endif
" autocmd! BufWritePost $MYVIMRC call ReloadVimrc()
